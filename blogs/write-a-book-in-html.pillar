{

	"title": "Write A Book In Html using Pillar",
	"template": "blog.mustache"

}

!! Write A Book In Html using Pillar

In this tutorial we are going to write a document (more precisely a book with chapters) with pillar syntax and generate in Html.

!!! Tools

During this tutorial we are going to manage with these tools.

-""Pillar""(*https://github.com/pillar-markup/pillar*) : the main tool, It generates documents in different formats as Html from pillar syntax.

-""Github""(*https://github.com*) :  for hosting our book on the web. It means you need to have a Github account, if not follow this *https://services.github.com/on-demand/intro-to-github/create-github-account*.

-""Travis""(*https://travis-ci.org*) :  for automatic deployment.


!!! Context of the book

Our book is about learning pillar syntax.

So our chapters are:

-Safe Pillar installation on Ubuntu/MacOS
-Text Changing with pillar styling elements


!!! Installation

Pillar project is available on Github. So we are going to clone it and build from sources.

[[[language=bash
#for SSH cloning
$ git clone git@github.com:pillar-markup/pillar.git -b dev-7
#for HTTPS cloning
$ git clone https://github.com/pillar-markup/pillar.git -b dev-7
]]]

The branch ==dev-7== is the branch with latest available changes. The above command creates a
directory named ==pillar== in your file system.

Now we should build pillar in command line. We get in the repository
and execute the script.

[[[language=bash
$ cd pillar
$ ./scripts/build.sh
# This will create a buil directory under pillar directory. This directory contains the executable.
]]]

Let's move installation directory to ==.pillar== and add path our environment variables.

[[[
$ cd ..
$ mv pillar ~/.pillar
# update path in your .bashrc or .zshrc
$ export PILLAR_HOME="$HOME/.pillar/build"
$ export PATH="$PATH:$PILLAR_HOME"
]]]

We currently have all tools for generating Html files from pillar.


!!! Writing the book

We are going to follow these steps:
- Create a repository on Github
- Clone that empty repository
- Choose an archetype and install it on that repo
- Write some chapters of the book
- Update ==pillar.conf==
- Configure Travis
- Publish book on Github


!!!! Create a Github repository

We choose to name our repository as ""OurBook"".

Let's proceed following these steps:

- In the upper-right corner of any page, click ""+"", and then click ""New repository"" as: 
+New repository>file://figures/new.png+
- Type a name for our repository ""OurBook"".
- Optionally, add a description for your repository like "Our First Pillar Book" 
- According to informations which will be on your website, you have to chose between "Private" and "Public". Generaly it is public. For private, you need to pay to GitHub.

+Filling all required information>file://figures/creating.png+

- Select ""Initialize this repository with a README"".
- Add .gitignore by selecting Smalltalk as default language.
- Click ""Create repository"" to finish.

Your GitHub repository is now created and is empty (Just only a README.md file and .gitignore).
+GitHub repository>file://figures/created.png+


!!!! Clone the repository

Now the repository is created, clone it to your local machine.

Choose a directory anywhere in your machine and clone your repository.

@@note :  this part means you have git command line tool installed. If not, follow *this>https://www.linode.com/docs/development/version-control/how-to-install-git-on-linux-mac-and-windows/*.

[[[
#SSH
$ git clone git@github.com:your_name/ourbook.git
#HTTPS
$ git clone https://github.com/your_nam/ourbook.git
]]]

+Cloning project>file://figures/cloning.png+

!!!! Install archetype in your repo

As we are writing a book, we are going to install an archetype named ""book"".

[[[
$ cd OurBook
$ pillar archetype book
]]]

@@note The last command could generate errors. Some of them.
-pillar: command not recognized. Check the path in your .bashrc or .zshrc.
-archetype: is not a valid command. Maybe, you have another program with the same name pillar on your machine. Try to remove it or change the path order like this ""export PILLAR_HOME="~/.pillar/build:$PATH"""
-book does not exist. Check if a repository ==book== is present under ==.pillar/archetypes==, if not re-run ==./scripts/build.sh==

""Some explanations""
This command checks for an archetype (here ==book==) in pillar installation directory and copy files from that repository to your project one's.
Exactly an archetype is a directory with a special hierarchy inside.
We have two subdirectories: 
-""sample"" a directory containing an example of sources using that archetype. The important things we have in that directory are a ==pillar.conf== file and an ==index.pillar== (maybe other .pillar files)
-""support"" contains mustache, latex or css and other related files that forms the archetype. Here we have a subdirectory ""templates"" which contains directories according to each type of output we can generate with this archetype. We can have an ""html"", ""latex"" or ""epub"" directory.

So the pillar archetype installation command copies the content of ""support"" directory and put it in a ""_support"" directory under our project directory. ""sample"" directory contents are pasted directly at the root of our project. Then we have a project directory with 
some example files and ""_support"" directory for the archetype.

+Archetype installation>file://figures/archetype_install.png+

!!!! Write some chapters

Before going through chapters writing, let's create an introduction file which is going to include all other files. Create a file ==index.pillar== and put the below content in.

[[[
!! Write An Html Book With Pillar Syntax
	
In this tutorial we learn how to write a book and publish it online. We are going to use pillar syntax. 
So let's start by installing Pillar.

]]]

We have all the architecture to start writing our chapters. These chapters are going to be included in ==index.pillar==. Here we could notice a pre-installed ""Chapters"" directory. The book archetype is especially made for writing books, so it supposes we are going to have chapters in our book.


""Let's start with a chapter showing pillar installation.""

Just create a file named ==PillarInstallation.pillar== under ""Chapters"" directory and put this content in.

[[[
	!!! Pillar Installation

	A complete Pillar installation process.

	[[[language=bash
	#for SSH cloning
	$ git clone git@github.com:pillar-markup/pillar.git -b dev-7
	#for HTTPS cloning
	$ git clone https://github.com/pillar-markup/pillar.git -b dev-7
	]]]

	The branch ==dev-7== is the branch with latest available changes. The above command creates a
	directory named ==pillar== in your file system.

	Now we should build pillar in command line. We get in the repository
	and execute the script.

	[[[language=bash
	$ cd pillar
	$ ./scripts/build.sh
	# This will create a buil directory under pillar directory. This directory contains the executable.
	]]]

	Let's move installation directory to ==.pillar== and add path our environment variables.

	[[[
	$ cd ..
	$ mv pillar ~/.pillar
	# update path in your .bashrc or .zshrc
	$ export PILLAR_HOME="$HOME/.pillar/build"
	$ export PATH="$PATH:$PILLAR_HOME"
	]]]

	We currently have all tools for generating Html files from pillar.

]]]

@@note We are going to explain a bite pillar syntax. These elements ""[[[...]]]"" are for declaring a code blocks. It generally used to express some lines of code in any language (bash, javascript, pillar). According to the archetype, code blocks can be colored or other effect. Actually pillar code blocks are testable (only for smalltalk code), we check if our expressions ar correct. Have a look here(coming soon). ""\=\=word\=\="" is to specify a monospaced word.

After registering this file, update ==index.pillar==. Add the following line in the file.

[[[
${inputFile:path=Chapters/PillarInstallation.pillar}$
]]]

@@note This is an annotation. During Pillar compilation, the annotation will be replaced by ==PillarInstallation.pillar== contents. The file location is specified using ""path"". Everytime we are going to add a new chapter, we are going to add the chapter in ==index.pillar== by doing the above manipulation.


""Add A New Chapter""

Let's propose a chapter showing more Pillar syntax.

[[[
!!! Pillar Syntax
	
In Pillar, you have titles specified using ""!"". The number of ""!"" corresponds to the title level.

!!!! How to add a figure.

First we are going to organize our folders to have a more good and flexible architecture.
Create a folder named ==figures== under your project directory. This folder is going to contain all the figures of the project.

+Archetype installation>file://figures/archetype_install.png+

The principal elements of this syntax ""+...+"", "">"" and ""file://"".
""+"" elements are delimiters. The word before "">"" act as a title. After ""file://"" element you specify the path to the image.

	
!!!! Links
	
That *Pillar>https://github.com/pillar-markup/pillar* is an external link. ""*"" elements are delimiters and ""Pillar"" stands for link. The part after "">"" is the link location, the cible.
For internal links, this is the same syntax, link locations only have to finish by .pier or .pillar 


!!!! Formatting

To put a text in bold, just write ""text"". For italic, write ''italic''.
You want underline a word, that is __underlined__.
 ""-"" builds lists.

Here are some elements of syntax, for complete syntax, have a look at *Pillar syntax>https://squarebracketassociates.github.io/Booklet-PublishingAPillarBooklet/PillarSyntax.html*
]]]


Put this content in a file named ==PillarSyntax.pillar== under ""Chapters"" folder and add it to ==index.pillar==.

Now the ==index.pillar== is looking like that.

[[[
!! Write An Html Book With Pillar Syntax
	
In this tutorial we learn how to write a book and publish it online. We are going to use pillar syntax. 
So let's start by installing Pillar.

${inputFile:path=Chapters/PillarInstallation.pillar}$

${inputFile:path=Chapters/PillarSyntax.pillar}$

]]]

We have a book with all chapters, now we are going to configure the project.




!!!! Update ==pillar.conf==

Normally ==pillar.conf== should like:

[[[

{
  "base_url": "",
  "site_name": "Pharo Book",
  "title": "The Pillar Super Book Archetype",
  "attribution": "The Pillar team",
  "series": "Square Bracket tutorials",
  "keywords": "project template, Pillar, Pharo, Smalltalk",
  "language": "en-UK",
  "epub-id": "urn:uuid:A1B0D67E-2E81-4DF5-9E67-A64CBE366809",
	  
	  
  #'"tocFile": "index.pillar" if you have a index.pillar file containing the table of contents of your book': #comment,
  "latexWriter" : #'latex:sbabook',
  "htmlWriter": #html
}

]]]

Let's change some attributes and modify two capital things.

I propose ""Pillar Hand On"" as title. For keywords, ""installation, pillar, pharo, smalltalk, syntax"".

One important thing to specify is the ""base_url"" depending on the way you want to distribute your book.
You want to use Github and have free access to the book via ""https://your_username.github.io/OurBook"", then set ""base_url"" to ""/OurBook"".
(We named the repository ""OurBook"").

The new book archetype propose a table of contents element for Html output. So we are going to display the table of contents. 
To do that, we need to decomment the line ""#'"tocFile": "index.pillar" if you have a index.pillar file containing the table of contents of your book': #comment"".
In our book, we have an ==index.pillar== including other chapters. So we specify ==index.pillar== as entry point.
Then set ""tocFile"" to ""index.pillar"". Pillar looks for titles strating from ==index.pillar==. So we are going to have a complete table of contents for all the book.

Finally ==pillar.conf== looks like:

[[[
{
  "base_url": "/OurBook",
  "site_name": "Pharo Book",
  "title": "Pillar Hand On",
  "attribution": "The Pillar team",
  "series": "Square Bracket tutorials",
  "keywords": "installation, pillar, pharo, smalltalk, syntax",
  "language": "en-UK",
  "epub-id": "urn:uuid:A1B0D67E-2E81-4DF5-9E67-A64CBE366809",
	  
	  
  "tocFile": "index.pillar",
  "latexWriter" : #'latex:sbabook',
  "htmlWriter": #html
}

]]]




!!!! Configure Travis

We now have a book ready for deployment. You already have a hosting service (different from GitHub Pages) and you want to host your book on that website, You copy generated html files and follow the 
deployment process according to your provider.
When you build your book in Html, generated files are located in ""_result/html"" under the project directory.


Or You want to have a free hosting on Github via GitHub Pages. If that, let's automatize this process.

The context is:
- You have a GitHub account
- You have a GitHub repository
- This repository contains your project files
- You want this process : write your ==.pillar== files, commit on GitHub, have your books updated on the web
- You don't have a Travis account and don't know how it works

Your are in that context, follow this *quick start for Travis>quick_start_travis.pillar*. It will help you create a Travis account linked to your GithHub account.
By following the tutorial, you configure Travis on your project.

The importants things you have to remember:
- Activate the project in Travis
- Generate a token in GitHub and Set it as variable in Travis
- Check if GitHub Pages is activated on the good branch
- Create a ==.travis.yml== in your project (at the root)

In the ==.travis.yml== file, let's put this content.

[[[
language: smalltalk

os:
    - linux

smalltalk:
    - Pharo-6.1

install:
    # Pillar installation
    - git clone https://github.com/pillar-markup/pillar.git .pillar -b dev-7  # Clone pillar
    - cd .pillar && ./scripts/build.sh && cd ..

script:
    - .pillar/build/pillar build html
    - cd _result/html && touch .nojekyll && cd ..

deploy:
   provider: pages
   skip-cleanup: true
   github-token: $GH_TOKEN
   keep-history: true
   local_dir: _result/html
   on:
     branch: master
]]]




!!!! Publish On GitHub

This last part is about publishing your files on your GitHub repository. Normally the repository should already exists.
The directory which you are working in has been cloned from that repository.
So you only have to follow below commands.


[[[
# go to your project directory and type these commands
# add all files
$ git add .
$ git commit -m "all chapters implemented"
$ git push
]]]

After pushing your book on GitHub, Travis trigger that commit and start building the website.
Few minutes after, your book will be available at ""https://your_username.github.io/OurBook"".

@@note If you start working in local on your machine without creating a GitHub repository, you should create one now. And push your files on that repository.
